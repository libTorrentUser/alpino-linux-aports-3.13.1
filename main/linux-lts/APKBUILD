# Maintainer: Natanael Copa <ncopa@alpinelinux.org>

_flavor=lts
pkgname=linux-${_flavor}
pkgver=5.10.11
case $pkgver in
	*.*.*)	_kernver=${pkgver%.*};;
	*.*) _kernver=$pkgver;;
esac
pkgrel=0
pkgdesc="Linux lts kernel"
url="https://www.kernel.org"
depends="mkinitfs"
_depends_dev="perl gmp-dev elfutils-dev bash flex bison"

# 'linux-firmware-any' is not really needed and it will break the build if you are 
# executing 'abuild -r' on a live system. On a live system you have two choices
# - install 'linux-firmware-none'
# - manually install all dependencies except that one and use 'abuild -rd'
#
# I believe that package is only needed in order to ensure the correct build order
# when building more than just this package. The devs explained to me that the 
# official workaround (and the reason why they are using 'linux-firmware-any' 
# of instead 'linux-firmware') is that one can simply install 'linux-firmware-none'
# and the build system will be happy and everything will work.
makedepends="$_depends_dev sed installkernel bc linux-headers linux-firmware-any openssl-dev 
	diffutils findutils xz"

options="!strip"
_config=${config:-config-lts.${CARCH}}
install=
source="https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/linux-$_kernver.tar.xz
	0002-powerpc-config-defang-gcc-check-for-stack-protector-.patch

	0007-pci-hotplug-declare-IDT-bridge-as-hotpluggabl-bridge.patch
	0008-pci-spr2803-quirk-to-fix-class-ID.patch

	config-lts.aarch64
	config-lts.armv7
	config-lts.x86
	config-lts.x86_64
	config-lts.ppc64le
	config-lts.s390x
	config-lts.mips64

	config-virt.aarch64
	config-virt.armv7
	config-virt.ppc64le
	config-virt.x86
	config-virt.x86_64

	config-custom.x86_64
	"
subpackages="$pkgname-dev:_dev:$CBUILD_ARCH"
_flavors=
for _i in $source; do
	case $_i in
	config-*.$CARCH)
		_f=${_i%.$CARCH}
		_f=${_f#config-}
		_flavors="$_flavors ${_f}"
		if [ "linux-$_f" != "$pkgname" ]; then
			subpackages="$subpackages linux-${_f}::$CBUILD_ARCH linux-${_f}-dev:_dev:$CBUILD_ARCH"
		fi
		;;
	esac
done

if [ "${pkgver%.0}" = "$pkgver" ]; then
	source="$source
	https://cdn.kernel.org/pub/linux/kernel/v${pkgver%%.*}.x/patch-$pkgver.xz"
fi
arch="all !armhf"
license="GPL-2.0"

_carch=${CARCH}
case "$_carch" in
aarch64*) _carch="arm64" ;;
arm*) _carch="arm" ;;
mips*) _carch="mips" ;;
ppc*) _carch="powerpc" ;;
s390*) _carch="s390" ;;
esac

_compilerFlags="";

prepare() {
	# ask if the user wants to tune the compilation to the current CPU
	while true; do
	    read -p "Do you wish to optimize the code for the current CPU (march=native mtune=native)? [y/n] " yn
	    case $yn in
	        [Yy]* ) _compilerFlags="-O2 -march=native -mtune=native"; break;;
	        [Nn]* ) break;;
	        * ) echo "Please answer yes or no.";;
	    esac
	done

	local _patch_failed=
	cd "$srcdir"/linux-$_kernver
	if [ "$_kernver" != "$pkgver" ]; then
		msg "Applying patch-$pkgver.xz"
		unxz -c < "$srcdir"/patch-$pkgver.xz | patch -p1 -N
	fi

	# first apply patches in specified order
	for i in $source; do
		case $i in
		*.patch)
			msg "Applying $i..."
			if ! patch -s -p1 -N -i "$srcdir"/$i; then
				echo $i >>failed
				_patch_failed=1
			fi
			;;
		esac
	done

	if ! [ -z "$_patch_failed" ]; then
		error "The following patches failed:"
		cat failed
		return 1
	fi

	# remove localversion from patch if any
	rm -f localversion*
	oldconfig
}

oldconfig() {
	for i in $_flavors; do
		local _config=config-$i.${CARCH}
		local _builddir="$srcdir"/build-$i.$CARCH
		mkdir -p "$_builddir"
		echo "-$pkgrel-$i" > "$_builddir"/localversion-alpine \
			|| return 1

		cp "$srcdir"/$_config "$_builddir"/.config
		make -C "$srcdir"/linux-$_kernver \
			O="$_builddir" \
			ARCH="$_carch" \
			listnewconfig oldconfig
	done
}

build() {
	if [ ! -z "$_compilerFlags" ]; then
		# some parts of the kernel makefile explicitly set march and mtune value.
		# Here update it, forcing it to use -march and -mtune == native
		# Unfortunately this is not really reversible in case the user
		# stops the process in the middle
		cp "$srcdir"/linux-$_kernver/arch/x86/Makefile "$srcdir"/linux-$_kernver/arch/x86/Makefile.alpino-bak
		sed -i 's/march=k8\|march=nocona\|mtune=generic/march=native mtune=native/' "$srcdir"/linux-$_kernver/arch/x86/Makefile
	else
		# just to be safe, in case there is a Makefile.alpino-bak, assume it is the original and restore it
		if [ -e "$srcdir"/linux-$_kernver/arch/x86/Makefile.alpino-bak ]; then
			cp "$srcdir"/linux-$_kernver/arch/x86/Makefile.alpino-bak "$srcdir"/linux-$_kernver/arch/x86/Makefile
		fi
	fi

	unset LDFLAGS
	export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"
	for i in $_flavors; do
		cd "$srcdir"/build-$i.$CARCH
		make ARCH="$_carch" CC="${CC:-gcc}" \
			KBUILD_BUILD_VERSION="$((pkgrel + 1 ))-Alpine" \
			KCFLAGS="$_compilerFlags" \
			KCPPFLAGS="$_compilerFlags"
	done

	if [ ! -z "$_compilerFlags" ]; then
		# restore the kernel makefile, in case we modified it
		mv "$srcdir"/linux-$_kernver/arch/x86/Makefile.alpino-bak "$srcdir"/linux-$_kernver/arch/x86/Makefile
	fi
}

_package() {
	local _buildflavor="$1" _outdir="$2"
	local _abi_release=${pkgver}-${pkgrel}-${_buildflavor}
	export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

	cd "$srcdir"/build-$_buildflavor.$CARCH
	# modules_install seems to regenerate a defect Modules.symvers on s390x. Work
	# around it by backing it up and restore it after modules_install
	cp Module.symvers Module.symvers.backup

	mkdir -p "$_outdir"/boot "$_outdir"/lib/modules

	local _install
	case "$CARCH" in
		arm*|aarch64) _install="zinstall dtbs_install";;
		*) _install=install;;
	esac

	make -j1 modules_install $_install \
		ARCH="$_carch" \
		INSTALL_MOD_PATH="$_outdir" \
		INSTALL_PATH="$_outdir"/boot \
		INSTALL_DTBS_PATH="$_outdir/boot/dtbs-$_buildflavor"

	cp Module.symvers.backup Module.symvers

	rm -f "$_outdir"/lib/modules/${_abi_release}/build \
		"$_outdir"/lib/modules/${_abi_release}/source
	rm -rf "$_outdir"/lib/firmware

	install -D include/config/kernel.release \
		"$_outdir"/usr/share/kernel/$_buildflavor/kernel.release
}

# main flavor installs in $pkgdir
package() {
	depends="$depends linux-firmware-any"

	_package lts "$pkgdir"
}

# subflavors install in $subpkgdir
virt() {
	_package virt "$subpkgdir"
}

custom() {
	_package custom "$subpkgdir"
}

_dev() {
	local _flavor=$(echo $subpkgname | sed -E 's/(^linux-|-dev$)//g')
	local _abi_release=${pkgver}-${pkgrel}-$_flavor
	# copy the only the parts that we really need for build 3rd party
	# kernel modules and install those as /usr/src/linux-headers,
	# simlar to what ubuntu does
	#
	# this way you dont need to install the 300-400 kernel sources to
	# build a tiny kernel module
	#
	pkgdesc="Headers and script for third party modules for $_flavor kernel"
	depends="$_depends_dev"
	local dir="$subpkgdir"/usr/src/linux-headers-${_abi_release}
	export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

	# first we import config, run prepare to set up for building
	# external modules, and create the scripts
	mkdir -p "$dir"
	cp "$srcdir"/config-$_flavor.${CARCH} "$dir"/.config
	echo "-$pkgrel-$_flavor" > "$dir"/localversion-alpine

	make -j1 -C "$srcdir"/linux-$_kernver O="$dir" ARCH="$_carch" \
		syncconfig prepare modules_prepare scripts

	# remove the stuff that points to real sources. we want 3rd party
	# modules to believe this is the soruces
	rm "$dir"/Makefile "$dir"/source

	# copy the needed stuff from real sources
	#
	# this is taken from ubuntu kernel build script
	# http://kernel.ubuntu.com/git/ubuntu/ubuntu-zesty.git/tree/debian/rules.d/3-binary-indep.mk
	cd "$srcdir"/linux-$_kernver
	find .  -path './include/*' -prune \
		-o -path './scripts/*' -prune -o -type f \
		\( -name 'Makefile*' -o -name 'Kconfig*' -o -name 'Kbuild*' -o \
		   -name '*.sh' -o -name '*.pl' -o -name '*.lds' -o -name 'Platform' \) \
		-print | cpio -pdm "$dir"

	cp -a scripts include "$dir"

	find $(find arch -name include -type d -print) -type f \
		| cpio -pdm "$dir"

	install -Dm644 "$srcdir"/build-$_flavor.$CARCH/Module.symvers \
		"$dir"/Module.symvers

	mkdir -p "$subpkgdir"/lib/modules/${_abi_release}
	ln -sf /usr/src/linux-headers-${_abi_release} \
		"$subpkgdir"/lib/modules/${_abi_release}/build
}

sha512sums="95bc137d0cf9148da6a9d1f1a878698dc27b40f68e22c597544010a6c591ce1b256f083489d3ff45ff77753289b535135590194d88ef9f007d0ddab3d74de70e  linux-5.10.tar.xz
d19365fe94431008768c96a2c88955652f70b6df6677457ee55ee95246a64fdd2c6fed9b3bef37c29075178294a7fc91f148ead636382530ebfa822be4ad8c2f  0002-powerpc-config-defang-gcc-check-for-stack-protector-.patch
ca5aafac37e0b5f3fcbaf801e12f98beb58ffaf1d8c88f76caff22b059831869b4094e7fdcb6d6860422d6b2d036e072caff460e1feb84bd04d10740ad56265b  0007-pci-hotplug-declare-IDT-bridge-as-hotpluggabl-bridge.patch
cbe85cf34e8420c91d2276c2d2aa0ab5023af68e57a1fa613f073f16a76766c67f585eda71c28f232bd0625e0dc8275a9eddc95f49409205dc0dbcc28c9fac1c  0008-pci-spr2803-quirk-to-fix-class-ID.patch
60ec67d64491ed912a1a72916d42bc2040c85fec993b8e73c812faa755896b45436a7f32617a12411fe45a5eb7688d3806f2a655d9ed27c9a836d0c29c708ec1  config-lts.aarch64
b6c5625d81bf5d027b29074de0418328eee0733c692a457cc35959820717fea51e980d9855af89a6f953b1e60eda8609782e11b0b78d36d0e7365d99b4a1d9eb  config-lts.armv7
608371747c431fe648a71adf75fb7f290d6a45333d8ac423cfd989de16a49489b8a565eb070517b89b75d81176a5b350dfcf40338584f7936aa7deef678de3c6  config-lts.x86
969bb83af1a2f62619b66d89f79f69fd32e7189c736fc52502fd02e935c6e17c17920c7563fec1bb7652337636ed0bd359d913cce53c9385b6d17d196c10157e  config-lts.x86_64
a2b9fef57490c857d9a2c0f5e3a6c9bccbd76430f58b6f012e59865f4df610b97d3069d9cc8552f6081a7e3780a6ef2a87ea3d67aee06bcf5b19b2d8862dc8e0  config-lts.ppc64le
0e163357c66893e2a3d352c3ce2d8bcc239519bbac372e07954635bb7baa2fda0f703c74d1799a504fd0252664fd6a24a0dac252446d40437006b256c4f8cec2  config-lts.s390x
3b612dd6fb8fc639bb88b91e5adecdb30f03d3566df2585031851ce365a50cfbfaee1a259b4c7a8b49e94a717493d5e0cf2eebcd59f9ac49f6a11f7ee0d99a46  config-lts.mips64
885efa8a0cdedcc26d0b0603a334afc8e6929b36b1e417bd7b3661740983bd1081a30ab75f674861721b01f8a8cbce11700938ac9ace57bcde3945e46d252a22  config-virt.aarch64
d4a7a1bcf9ff3c6a312e99bb253e45ea9acdf30ab7863b25992d2b5766b5807ad97244f069006def506f850814ab4641a14e2096fb93e2b1dfab07a2825f4d41  config-virt.armv7
504a716dc4258d7172f2a3a0652633731b1ae797e3af9c2d61423663613578db1bb7ece41943183830f81862c226f971d1843d9c98f46027ebc2b60680662fcf  config-virt.ppc64le
a318ccee20c00836b2b1fce998552c1938978c2431fe898ae7b29385a27d717ff90d72484d5acfce61bf148a0d3b58636d804e3a2a9dcd8d245818c33db57f86  config-virt.x86
b53d66c662e3192fc86f0875e2bb2a530b804d90be3192bb0f28506c35969730838e38597aedb6ff4e74431b271c7cb607a47f916688b451785df0cd1a336f0b  config-virt.x86_64
545834f077e62f6dd280acbfaa1e9560d72a7022a07031d8d326de2745436b30409316fb3cb06be5c95d68112d7ccb93869490e4c12f67c7c213f12d2df3942a  config-custom.x86_64
313696af4792f9a314e7acedabd7f2c08e9605b274d94e4c92f36e69c42ecb506c35463f8224879d4a94536c973b8488b799d5f7e450cb792a04381eb88c8e66  patch-5.10.11.xz"
